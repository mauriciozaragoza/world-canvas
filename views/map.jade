extends layout

block content
	.container
		div(class="row")
			div(class="col-md-12", style="text-align:center;")
				h2 World Zones

	.container
		div(class="row")
			div(class="col-md-12", style="text-align:center;")
				div(id="map")

	div(class="modal fade", id="modal")
		div(class="modal-dialog")
			div(class="modal-content")
				div(class="modal-header")
					button(type="button", class="close", data-dismiss="modal", aria-hidden="true") x
					h4(class="modal-title")
						span(id="countryName") Zone
				div(class="modal-body")
					center
						div(id="countryImage")
				div(class="modal-footer")
					button(type="button", class="btn btn-default", data-dismiss="modal") Close
					
					span(id="countryLink")
					
					a(href="/like/id/", style="margin-left:10px;")
						button(type="button", class="btn btn-primary")
							li(class="fa fa-heart")   Like

	script(src="http://d3js.org/d3.v3.min.js")
	script(src="http://d3js.org/queue.v1.min.js")
	script(src="/js/topojson.js")
	script(src="/js/lib/jquery.js")
	script(src="/js/lib/bootstrap.js")
	script.
		var width  = 940,
			height = 550,
			active;

		var color = d3.scale.category10();

		var projection = d3.geo.mercator()
			.translate([470, 300])
			.scale(150);

		var path = d3.geo.path()
			.projection(projection);

		var svg = d3.select("#map").append("svg")
			.attr("width", width)
			.attr("height", height)
			.attr("style", "background:#93D2F0;");

		var g = svg.append("g");

		function click(d) {
			if (active === d) return reset();
			g.selectAll(".active").classed("active", false);
			d3.select(this).classed("active", active = d);

			var b = path.bounds(d);
			g.transition().duration(750).attr("transform",
				"translate(" + projection.translate() + ")"
				+ "scale(" + .95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height) + ")"
				+ "translate(" + -(b[1][0] + b[0][0]) / 2 + "," + -(b[1][1] + b[0][1]) / 2 + ")");

			$('#modal').modal('show');
			$('#countryName').text(d.name);

			var image = '<img src="http://placehold.it/400x400&text=' + d.name + '">';
			var link = '<a href="/history/' + d.name + '" style="margin-left:10px;"><button type="button" class="btn btn-default"> History</button></a>';
			$('#countryImage').html(image);
			$('#countryLink').html(link);
		}

		function reset() {
			g.selectAll(".active").classed("active", active = false);
			g.transition().duration(750).attr("transform", "");
		}

		var tooltip = d3.select("#map").append("div")
			.attr("class", "tooltipMap");

		queue()
			.defer(d3.json, "/data/world-50m.json")
			.defer(d3.tsv, "/data/world-country-names.tsv")
			.await(ready);

		function ready(error, world, names) {
			var countries = topojson.object(world, world.objects.countries).geometries,
				neighbors = topojson.neighbors(world, countries),
				i = -1,
				n = countries.length;

			countries.forEach(function(d) { 
				var tryit = names.filter(function(n) { return d.id == n.id; })[0];
				if (typeof tryit === "undefined"){
			    	d.name = "Undefined";
				} else {
			    	d.name = tryit.name; 
				}
			});

			var country = g.selectAll(".country").data(countries);

			country
				.enter()
					.insert("path")
					.attr("class", "country")    
					.attr("title", function(d,i) { return d.name; })
					.attr("d", path)
					.attr("data-reveal-id", "info")
					.attr("data-animation", "fade")
					.on("click", click)
					.style("fill", function(d, i) { return color(d.color = d3.max(neighbors[i], function(n) { return countries[n].color; }) + 1 | 0); });

			country
				.on("mouseover", function(d){
					tooltip.text(d["name"]);
					return tooltip.style("visibility", "visible");
				})
				.on("mousemove", function(){return tooltip.style("top", (d3.event.pageY-120)+"px").style("left",(d3.event.pageX-350)+"px");})
				.on("mouseout", function(){return tooltip.style("visibility", "hidden");});
		}